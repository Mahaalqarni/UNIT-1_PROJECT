from colorama import *


print("⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯")
def generate_questions(category):
    if category == "a":
        return [
            (Fore.YELLOW + "\n1• What symbol is used to assign a value to a variable in Python?\n",
             {"   a": "=", "   b": "==", "   c": ":", "   d": "->\n"},
             "a"),
            (Fore.YELLOW + "\n2• Which of the following is a valid Python variable name?\n",
             {"   a": "my_var", "   b": "123var", "   c": "var-1", "   d": "my var\n"},
             "a"),
            (Fore.YELLOW + "\n3• What is the output of the following code snippet?\nprint('Hello, ' + 'World!')\n",
             {"   a": "Hello, World!", "   b": "Hello + World!", "   c": "Hello, ", "   d": "World!\n"},
             "a"),
            (Fore.YELLOW + "\n4• What is the correct way to create a single-line comment in Python?\n",
             {"   a": "// This is a comment", "   b": "# This is a comment",
              "   c": "/* This is a comment */", "   d": "<!-- This is a comment -->\n"},
             "b"),
            (Fore.YELLOW + "\n5• Which of the following is NOT a Python data type?\n",
             {"   a": "integer", "   b": "string", "   c": "tuple", "   d": "float-point\n"},
             "d"),
            (Fore.YELLOW + "\n6• What is the result of the following expression: 10 / 3?\n",
             {"   a": "3", "   b": "3.33", "   c": "3.0", "   d": "3.33333333333\n"},
             "c"),
            (Fore.YELLOW + "\n7• What is the output of the following code snippet?\nprint(len('Python'))\n",
             {"   a": "7", "   b": "5", "   c": "6", "   d": "SyntaxError\n"},
             "b"),
            (Fore.YELLOW + "\n8• Which keyword is used to define a function in Python?\n",
             {"   a": "def", "   b": "function", "   c": "define", "   d": "func\n"},
             "a"),
            (Fore.YELLOW + "\n9• What is the output of the following code snippet? print(2 ** 3)\n",
             {"   a": "5", "   b": "6", "   c": "8", "   d": "9\n"},
             "c"),
            (Fore.YELLOW + "\n10• What is the correct way to create a multi-line string in Python?\n",
             {"   a": "str = 'Hello, World!'", "   b": "str = 'Hello, \n             World!'",
              "   c": "str = '''Hello, World!'''", "   d": "str = 'Hello, World!' + 'World!'\n"},
             "c"),
        ]
    elif category == "b":
        return [
            (Fore.YELLOW + "\n1• What is the Python data structure used to represent dates?\n",
             {"   a": "list", "   b": "tuple", "   c": "dictionary", "   d": "datetime\n"},
             "d"),
            (Fore.YELLOW + "\n2• Which module in Python provides date and time functionality?\n",
             {"   a": "time", "   b": "dateutil", "   c": "datetime", "   d": "calendar\n"},
             "c"),
            (Fore.YELLOW + "\n3• How do you create a new date object in Python using the datetime module?\n",
             {"   a": "date()", "   b": "datetime()", "   c": "create_date()", "   d": "new_date()\n"},
             "b"),
            (Fore.YELLOW + "\n4• Which method is used to extract the year from a date object in Python?\n",
             {"   a": "year()", "   b": "get_year()", "   c": "extract_year()", "   d": "strftime()\n"},
             "a"),
            (Fore.YELLOW + "\n5• What does the strftime() method do?\n",
             {"   a": "Formats a date object as a string", "   b": "Parses a string into a date object",
              "   c": "Compares two date objects", "   d": "Calculates the difference between two dates\n"},
             "a"),
            (Fore.YELLOW + "\n6• How do you convert a string to a date object in Python using the datetime module?\n",
             {"   a": "str_to_date()", "   b": "parse_date()", "   c": "date_from_str()", "   d": "strptime()\n"},
             "d"),
            (Fore.YELLOW + "\n7• What is the result of the expression: timedelta(days=5, hours=3, minutes=30) + timedelta(hours=2)?\n",
             {"   a": "8 hours and 30 minutes", "   b": "10 hours and 30 minutes",
              "   c": "1 day, 8 hours, and 30 minutes", "   d": "7 days, 8 hours, and 30 minutes\n"},
             "c"),
            (Fore.YELLOW + "\n8• Which method is used to compare two date objects in Python?\n",
             {"   a": "==", "   b": "!=", "   c": "is_equal()", "   d": "compare()\n"},
             "a"),
            (Fore.YELLOW + "\n9• How do you extract the current date and time in Python?\n",
             {"   a": "current_datetime()", "   b": "get_date_time()", "   c": "datetime.now()", "   d": "now_date_time()\n"},
             "c"),
            (Fore.YELLOW + "\n10• What is the result of the expression: date1 - date2?\n",
             {"   a": "The difference between date1 and date2 in days",
              "   b": "The sum of date1 and date2 in days",
              "   c": "The product of date1 and date2 in days",
              "   d": "An error, you cannot subtract date objects\n"},
             "a"),
        ]
    elif category == "c":
        return [
            (Fore.YELLOW + "\n1• What is encapsulation in object-oriented programming?\n",
             {"   a": "The process of hiding the internal details of an object and providing an interface to access it",
              "   b": "The process of creating multiple instances of a class",
              "   c": "The process of defining a new class based on an existing class",
              "   d": "The process of breaking down a complex problem into smaller subproblems\n"},
             "a"),
            (Fore.YELLOW + "\n2• What is inheritance in object-oriented programming?\n",
             {"   a": "A mechanism that allows a class to inherit properties and methods from another class",
              "   b": "A mechanism that allows a class to access private members of another class",
              "   c": "A mechanism that allows a class to hide its implementation details",
              "   d": "A mechanism that allows a class to define multiple methods with the same name but different parameters\n"},
             "a"),
            (Fore.YELLOW + "\n3• What is polymorphism in object-oriented programming?\n",
             {"   a": "The process of creating multiple instances of a class",
              "   b": "The process of defining a new class based on an existing class",
              "   c": "The process of breaking down a complex problem into smaller subproblems",
              "   d": "The ability of an object to take on many forms and respond differently based on its context\n"},
             "d"),
            (Fore.YELLOW + "\n4• What is a class in Python?\n",
             {"   a": "A blueprint for creating objects",
              "   b": "A built-in data type in Python",
              "   c": "A function that returns a value",
              "   d": "A statement used for control flow in Python\n"},
             "a"),
            (Fore.YELLOW + "\n5• What is an object in Python?\n",
             {"   a": "An instance of a class",
              "   b": "A statement used for control flow in Python",
              "   c": "A built-in data type in Python",
              "   d": "A function that returns a value\n"},
             "a"),
            (Fore.YELLOW + "\n6• What is the __init__ method used for in Python classes?\n",
             {"   a": "To define the class constructor",
              "   b": "To define class variables",
              "   c": "To define instance methods",
              "   d": "To define class constants\n"},
             "a"),
            (Fore.YELLOW + "\n7• What is method overriding in Python?\n",
             {"   a": "The process of creating multiple instances of a class",
              "   b": "The process of defining a new class based on an existing class",
              "   c": "The process of hiding the internal details of an object and providing an interface to access it",
              "   d": "The process of providing a different implementation of a method in a subclass\n"},
             "d"),
            (Fore.YELLOW + "\n8• What is method overloading in Python?\n",
             {"   a": "The process of creating multiple instances of a class",
              "   b": "The process of defining a new class based on an existing class",
              "   c": "The process of providing a different implementation of a method in a subclass",
              "   d": "The process of defining multiple methods with the same name but different parameters\n"},
             "d"),
            (Fore.YELLOW + "\n9• What is a constructor in Python?\n",
             {"   a": "A method that is automatically called when an object is created",
              "   b": "A method used for destroying objects",
              "   c": "A method used for copying objects",
              "   d": "A method used for comparing objects\n"},
             "a"),
            (Fore.YELLOW + "\n10• What is the self parameter in Python class methods?\n",
             {"   a": "A reference to the current object",
              "   b": "A keyword used for conditional statements",
              "   c": "A keyword used for looping",
              "   d": "A keyword used for exception handling\n"},
             "a"),
        ]
    else:
        print("Invalid category choice.")
        return []
